{"version":3,"sources":["components/card.js","components/wrapper.js","components/header.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","clickCount","id","width","height","alt","name","src","imageUrl","Wrapper","children","Header","score","highscore","ShuffleCards","rndIndex","temp","i","length","Math","floor","random","App","state","cards","gameOver","endGame","_this","setState","forEach","card","count","find","obj","ResetGame","_this2","this","components_wrapper","components_header","Alert","isOpen","color","map","src_components_card","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"yvGAaeA,SAVF,SAAAC,GAAK,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAKL,EAAMM,WAAWN,EAAMO,MACvDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKK,MAAM,QAAQC,OAAO,QAAQC,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,eCF3DC,SAFC,SAAAd,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBJ,EAAMe,YCSpDC,SATA,SAAAhB,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMe,UAC9Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UACYJ,EAAMiB,MADlB,eACqCjB,EAAMkB,mCC8DnD,SAASC,EAAajB,GACpB,IAAIkB,EAAUC,EAAMC,EACpB,IAAKA,EAAEpB,EAAEqB,OAAO,EAAED,EAAE,EAAEA,IACpBF,EAAWI,KAAKC,MAAMD,KAAKE,UAAYJ,EAAE,IACzCD,EAAOnB,EAAEoB,GACTpB,EAAEoB,GAAKpB,EAAEkB,GACTlB,EAAEkB,GAAYC,EAEhB,OAAOnB,EAEMyB,iNArEbC,MAAQ,CACNC,QACAZ,MAAM,EACNC,UAAU,EACVY,UAAS,KAGXC,QAAU,WACJC,EAAKJ,MAAMX,MAAQe,EAAKJ,MAAMV,WAChCc,EAAKC,SAAS,CAACf,UAAWc,EAAKJ,MAAMX,QAEvCe,EAAKC,SAAS,CAACH,UAAS,IACxBE,EAAKJ,MAAMC,MAAMK,QAAQ,SAAAC,GACvBA,EAAKC,MAAM,IAEbJ,EAAKC,SAAS,CAAChB,MAAM,OAGvBX,WAAa,SAAAC,GACXyB,EAAKJ,MAAMC,MAAMQ,KAAK,SAACC,EAAKhB,GAC1B,GAAIgB,EAAI/B,KAAKA,EAAI,CACb,GAAsB,IAAnBsB,EAAMP,GAAGc,MAIV,OAHAP,EAAMP,GAAGc,MAAQP,EAAMP,GAAGc,MAAQ,EAClCJ,EAAKC,SAAS,CAAChB,MAAMe,EAAKJ,MAAMX,MAAO,IACvCe,EAAKC,SAASJ,MAAQV,EAAaU,IAC5B,EAEPG,EAAKD,gBAKfQ,UAAY,WACVP,EAAKC,SAAS,CAACH,UAAS,IACxBE,EAAKC,SAASJ,MAAQV,EAAaU,4EAG5B,IAAAW,EAAAC,KACP,OACExC,EAAAC,EAAAC,cAACuC,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAD,CAAQ1B,MAAOwB,KAAKb,MAAMX,MAAOC,UAAWuB,KAAKb,MAAMV,WAAvD,aACAjB,EAAAC,EAAAC,cAACyC,EAAA,EAAD,CAAOC,OAAQJ,KAAKb,MAAME,SAAU1B,UAAU,QAAQ0C,MAAM,UAA5D,aAA+E7C,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBC,QAASoC,KAAKF,WAAlD,UAG9EE,KAAKb,MAAMC,MAAMkB,IAAK,SAAAZ,GAAI,OACxBlC,EAAAC,EAAAC,cAAC6C,EAAD,CACA1C,WAAYkC,EAAKlC,WACjBC,GAAI4B,EAAK5B,GACT0C,IAAOd,EAAK5B,GACZM,SAAYsB,EAAKtB,SACjBF,KAAQwB,EAAKxB,iBAnDNuC,aCFlBC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.bbcd6769.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nconst Card = props => (\n    <div className=\"card\" onClick={()=> props.clickCount(props.id)}>\n        <div className=\"img-container\">\n            <img width=\"325px\" height=\"250px\" alt={props.name} src={props.imageUrl}/>\n           \n        </div>\n     \n    </div>\n);\n\nexport default Card;","import React from \"react\";\nimport \"./wrapper.css\";\nconst Wrapper = props => <div className=\"wrapper container\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./header.css\";\nconst Header = props => (\n    <div className=\"header\">\n        <div className=\"title\">{props.children}</div>\n        <div className=\"scores\">\n            Score: {props.score} HighScore: {props.highscore}\n        </div>\n    </div>\n);\n\nexport default Header;","import React, {Component} from 'react';\nimport Card from \"./components/card\";\nimport Wrapper from \"./components/wrapper\";\nimport Header from \"./components/header\";\nimport cards from \"./cards.json\";\nimport {Alert} from 'reactstrap';\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    cards,\n    score:0,\n    highscore:0,\n    gameOver:false\n  };\n\n  endGame = () => {\n    if (this.state.score > this.state.highscore) {\n      this.setState({highscore: this.state.score});\n    }\n    this.setState({gameOver:true});\n    this.state.cards.forEach(card => {\n      card.count=0;\n    })\n    this.setState({score:0});\n    \n  }\n  clickCount = id => {\n    this.state.cards.find((obj, i) => {\n      if (obj.id===id) {\n          if(cards[i].count === 0) {\n            cards[i].count = cards[i].count + 1;\n            this.setState({score:this.state.score +1});\n            this.setState.cards = ShuffleCards(cards);\n            return true;\n          } else {\n            this.endGame();\n          }\n      }\n    });\n  }\n  ResetGame = () => {\n    this.setState({gameOver:false});\n    this.setState.cards = ShuffleCards(cards);\n  }\n\n  render() {\n    return (\n      <Wrapper>\n        <Header score={this.state.score} highscore={this.state.highscore}>Clickster</Header>\n        <Alert isOpen={this.state.gameOver} className=\"alert\" color=\"danger\">Game Over <button className=\"btn btn-primary\" onClick={this.ResetGame}>Retry</button>\n        </Alert>\n        \n        {this.state.cards.map( card => (\n           <Card \n           clickCount={this.clickCount}\n           id={card.id}\n           key = {card.id}\n           imageUrl = {card.imageUrl}\n           name = {card.name} />\n        ) ) }\n       \n      </Wrapper>\n    );\n  }\n\n}\n\nfunction ShuffleCards(a) {\n  var rndIndex, temp, i;\n  for (i=a.length-1;i>0;i--) {\n    rndIndex = Math.floor(Math.random() * (i+1));\n    temp = a[i];\n    a[i] = a[rndIndex];\n    a[rndIndex] = temp;\n  }\n  return a;\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}